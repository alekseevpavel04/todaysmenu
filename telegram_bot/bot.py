import os
import logging
import requests
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# URL –¥–ª—è API —Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
FASTAPI_URL = "http://fastapi_app:8000/generate_recipe"
HEALTH_CHECK_URL = "http://fastapi_app:8000/health"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
def is_api_ready():
    try:
        response = requests.get(HEALTH_CHECK_URL, timeout=5)
        data = response.json()
        if data["status"] == "ok":
            return True
        logger.info(f"API –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤: {data}")
        return False
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API: {e}")
        return False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class RecipeStates(StatesGroup):
    waiting_for_query = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message):
    await message.reply(
        "üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–º –±–æ—Ç–µ!\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞. "
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, "
        "–∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞—Ä–±–æ–Ω–∞—Ä—É?' –∏–ª–∏ '–†–µ—Ü–µ–ø—Ç —Ç–∏—Ä–∞–º–∏—Å—É'"
    )
    await RecipeStates.waiting_for_query.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'], state='*')
async def send_help(message: types.Message):
    await message.reply(
        "üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º\n"
        "3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è!\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?\n"
        "‚Ä¢ –†–µ—Ü–µ–ø—Ç —à–∞—Ä–ª–æ—Ç–∫–∏ —Å —è–±–ª–æ–∫–∞–º–∏\n"
        "‚Ä¢ –•–æ—á—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Å—Ç—É –∫–∞—Ä–±–æ–Ω–∞—Ä–∞\n"
        "‚Ä¢ –†–µ—Ü–µ–ø—Ç —Ö–ª–µ–±–∞ –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API
@dp.message_handler(commands=['status'], state='*')
async def check_api_status(message: types.Message):
    await message.reply("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤...")
    if is_api_ready():
        await message.reply("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        await message.reply("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(state=RecipeStates.waiting_for_query, content_types=types.ContentTypes.TEXT)
async def process_recipe_request(message: types.Message, state: FSMContext):
    user_query = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å API –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
    if not is_api_ready():
        await message.reply(
            "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å—Ç–∞—Ç—É—Å–∞
    await bot.send_chat_action(message.chat.id, 'typing')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.reply("üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        response = requests.post(
            FASTAPI_URL,
            json={"query": user_query, "max_length": 2048, "temperature": 0.7},
            timeout=120  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 2 –º–∏–Ω—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        )

        if response.status_code == 200:
            result = response.json()
            recipe_text = result.get("recipe", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç.")

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if len(recipe_text) > 4000:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–ª–∏–Ω–Ω–æ–º —Ä–µ—Ü–µ–ø—Ç–µ
                await message.reply("üìñ –†–µ—Ü–µ–ø—Ç –ø–æ–ª—É—á–∏–ª—Å—è –±–æ–ª—å—à–∏–º, –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ —á–∞—Å—Ç—è–º:")

                parts = [recipe_text[i:i + 4000] for i in range(0, len(recipe_text), 4000)]
                for i, part in enumerate(parts):
                    await message.reply(f"–ß–∞—Å—Ç—å {i + 1}/{len(parts)}:\n\n{part}", parse_mode=ParseMode.MARKDOWN)
            else:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
                await message.reply(recipe_text, parse_mode=ParseMode.MARKDOWN)
        elif response.status_code == 503:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            logger.warning("API –æ—Ç–≤–µ—Ç–∏–ª–æ 503 - —Å–µ—Ä–≤–∏—Å –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
            await message.reply(
                "‚è≥ –Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            error_text = response.text
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {error_text}")
            await message.reply(
                "üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
    except requests.exceptions.Timeout:
        logger.error("Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
        await message.reply(
            "‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await message.reply("üòû –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.reply("üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –µ—Å–ª–∏ –¥–∞
        try:
            await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentTypes.ANY, state='*')
async def unknown_message(message: types.Message):
    await message.reply(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –±–ª—é–¥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å."
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

    # –ñ–¥–µ–º, –ø–æ–∫–∞ API –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
    retry_count = 0
    max_retries = 30  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è (30 * 10 —Å–µ–∫—É–Ω–¥)
    retry_interval = 10  # 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞...")
    while not is_api_ready() and retry_count < max_retries:
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ FastAPI —Å–µ—Ä–≤–∏—Å–∞... –ü–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries}")
        time.sleep(retry_interval)
        retry_count += 1

    if retry_count >= max_retries:
        logger.warning(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ FastAPI —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ.")
    else:
        logger.info("‚úÖ FastAPI —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)